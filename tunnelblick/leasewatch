#!/bin/bash -e

# Quick check - is the configuration there?
if ! scutil -w State:/Network/OpenVPN &>/dev/null -t 1 ; then
	# Configuration isn't there, so we forget it
	exit 0
fi

OPENVPN_CONFIG="$(/usr/sbin/scutil <<-EOF
	open
	show State:/Network/OpenVPN
	quit
EOF)"

PROCESS="$(echo "${OPENVPN_CONFIG}" | grep -i '^[[:space:]]*PID :' | sed -e 's/^.*: //g')"
CONNECTION="$(echo "${OPENVPN_CONFIG}" | grep -i '^[[:space:]]*Connection :' | sed -e 's/^.*: //g')"
USER="$(echo "${OPENVPN_CONFIG}" | grep -i '^[[:space:]]*User :' | sed -e 's/^.*: //g')"
CONFIG_PATH="$(echo "${OPENVPN_CONFIG}" | grep -i '^[[:space:]]*ConfigPath :' | sed -e 's/^.*: //g')"

if [ -n "${USER}" ] ; then
	LOG_DIR="$(eval echo ~${USER}/Library/Application Support/Tunnelblick/Configurations)"
else
	LOG_DIR="/tmp"
fi

if [ -d "${LOG_DIR}" ] ; then
	LOG_DIR="/tmp"
fi

if [ -z "${CONNECTION}" ] ; then
	CONNECTION="Tunnelblick-Leasewatch"
fi
LOG_FILE="${LOG_DIR}/${CONNECTION}.log"

if [ -n "${CONFIG_PATH}" ] ; then
    CONFIG_PATH_DASHES="$(echo "${CONFIG_PATH}" | sed -e 's/\//-/g')"
    LOG_FILE="/tmp/tunnelblick${CONFIG_PATH_DASHES}.logpipe"
fi
# If we have a process, then we check the DNS status...
if (( M=${PROCESS:-0} )) ; then
	# What's the correct DNS info?
	DNS_GOOD="$(/usr/sbin/scutil <<-EOF
		open
		show State:/Network/OpenVPN/DNS
		quit
	EOF)"
	# What's the current DNS info?
	DNS_NOW="$(/usr/sbin/scutil <<-EOF
		open
		show State:/Network/Global/DNS
		quit
	EOF)"

	# What's the correct WINS info?
        WINS_GOOD="$(/usr/sbin/scutil <<-EOF
		open
		show State:/Network/OpenVPN/SMB
		quit
        EOF)"
	# What's the current WINS info?
	WINS_NOW="$(/usr/sbin/scutil <<-EOF
		open
		show State:/Network/Global/SMB
		quit
	EOF)"

	# Do they match?  If not, then fix that by firing off a restart signal to the VPN... alternatively,
	# we could re-set this ourselves manually but the USR1 signal gives us the ability to restart the
	# VPN in case of a line crash or circuit change or something like that.
	RESTART="false"
    SEND_HEADER="true"
	if [ "${DNS_GOOD}" != "${DNS_NOW}" ] ; then
		RESTART="true"
		# Echo information on the reason the link was re-set
        echo -e "\003\n$(date '+%Y-%m-%d %T') *Tunnelblick: A network configuration change was detected" >> "${LOG_FILE}"
        SEND_HEADER="false"
		cat <<-EOF >> "${LOG_FILE}"
			DNS configuration has changed:
			--- BEGIN EXPECTED DNS CFG ---
			${DNS_GOOD}
			---- END EXPECTED DNS CFG ----
			--- BEGIN CURRENT DNS CFG ---
			${DNS_NOW}
			---- END CURRENT DNS CFG ----
		EOF
	fi
	if [ "${WINS_GOOD}" != "${WINS_NOW}" ] ; then
		RESTART="true"
		# Echo information on the reason the link was re-set
        if ${SEND_HEADER} ; then
            echo -e "\003\n$(date '+%Y-%m-%d %T') *Tunnelblick: A network configuration change was detected" >> "${LOG_FILE}"
        fi
		cat <<-EOF >> "${LOG_FILE}"
			WINS configuration has changed:
			--- BEGIN EXPECTED WINS CFG ---
			${WINS_GOOD}
			---- END EXPECTED WINS CFG ----
			--- BEGIN CURRENT WINS CFG ---
			${WINS_NOW}
			---- END CURRENT WINS CFG ----
		EOF
	fi

	if ${RESTART} ; then
		echo "Sending USR1 to OpenVPN PID ${PROCESS}" >> "${LOG_FILE}"
        echo -e "\003" >> "${LOG_FILE}"
        # sleep 1 so log message is displayed before we start getting log messages from OpenVPN about the restart
        sleep 1
		kill -USR1 ${PROCESS}
	fi
fi
